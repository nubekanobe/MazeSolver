# maze.py
from config import WALL
from config import PATH
from config import MUD
from config import BRIDGE
from config import WATER

GOAL_X = 1
GOAL_Y = 1


class MazeNode:
    def __init__(self, x, y, traversable=True, cost=PATH, heuristic=0):
        self.x = x
        self.y = y
        self.traversable = traversable
        self.cost = cost
        self.heuristic = heuristic

    def calculate_heuristic(self, goal_x, goal_y):  # manhattan method
        self.heuristic = (abs(goal_x - self.x) + abs(goal_y - self.y)) * 5


maze_layout1 = [
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL],
    [WALL, PATH, WALL, PATH, PATH, PATH, PATH, PATH, WALL, PATH, WALL, PATH, PATH, PATH, WALL, PATH, PATH, PATH, WALL, PATH, WALL],
    [WALL, PATH, WALL, WALL, WALL, WALL, WALL, PATH, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, PATH, WALL],
    [WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, PATH, PATH, WALL, PATH, WALL, PATH, WALL],
    [WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, WALL, WALL, PATH, WALL, PATH, WALL, PATH, WALL],
    [WALL, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, PATH, PATH, WALL],
    [WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL],
    [WALL, PATH, WALL, PATH, WALL, PATH, WALL, PATH, PATH, PATH, WALL, PATH, PATH, PATH, WALL, PATH, PATH, PATH, PATH, PATH, WALL],
    [WALL, WALL, WALL, PATH, WALL, PATH, WALL, WALL, WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL],
    [WALL, PATH, WALL, PATH, WALL, PATH, WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, WALL],
    [WALL, PATH, WALL, PATH, WALL, PATH, WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, PATH, WALL, PATH, WALL],
    [WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, WALL, PATH, PATH, PATH, WALL],
    [WALL, PATH, WALL, PATH, WALL, WALL, WALL, PATH, WALL, PATH, WALL, PATH, WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL],
    [WALL, PATH, WALL, PATH, WALL, PATH, PATH, PATH, WALL, PATH, WALL, PATH, PATH, PATH, WALL, PATH, PATH, PATH, PATH, PATH, WALL],
    [WALL, PATH, WALL, WALL, WALL, PATH, WALL, PATH, WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, WALL, WALL, PATH, WALL],
    [WALL, PATH, WALL, PATH, PATH, PATH, WALL, PATH, WALL, PATH, WALL, PATH, PATH, PATH, WALL, PATH, WALL, PATH, PATH, PATH, WALL],
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, PATH, WALL],
    [WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, WALL],
    [WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, PATH, WALL, PATH, WALL, PATH, WALL],
    [WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, WALL],
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL]
]

maze_layout2 = [
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL],
    [WALL, PATH, WALL, PATH, PATH, PATH, PATH, PATH, WALL, PATH, WALL, PATH, PATH, PATH, WALL, MUD, MUD, MUD, WALL, MUD, WALL],
    [WALL, PATH, WALL, WALL, WALL, WALL, WALL, PATH, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, MUD, WALL, MUD, WALL],
    [WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, MUD, MUD, WALL, MUD, WALL, MUD, WALL],
    [WALL, MUD, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, WALL, WALL, MUD, WALL, MUD, WALL, MUD, WALL],
    [WALL, MUD, PATH, PATH, PATH, PATH, WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, MUD, MUD, MUD, MUD, MUD, WALL],
    [WALL, MUD, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, PATH, WALL, WALL, WALL, MUD, WALL, WALL, WALL],
    [WALL, MUD, WALL, MUD, WALL, PATH, WALL, PATH, PATH, PATH, WALL, PATH, PATH, PATH, WALL, MUD, MUD, MUD, MUD, MUD, WALL],
    [WALL, WALL, WALL, MUD, WALL, PATH, WALL, WALL, WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL, MUD, WALL, WALL, WALL],
    [WALL, MUD, WALL, MUD, WALL, PATH, WALL, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, MUD, MUD, MUD, WALL, MUD, WALL],
    [WALL, MUD, WALL, MUD, WALL, PATH, WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL, MUD, WALL, MUD, WALL, MUD, WALL],
    [WALL, MUD, MUD, MUD, PATH, PATH, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, PATH, MUD, WALL, MUD, MUD, MUD, WALL],
    [WALL, MUD, WALL, MUD, WALL, WALL, WALL, PATH, WALL, PATH, WALL, PATH, WALL, WALL, WALL, WALL, WALL, MUD, WALL, WALL, WALL],
    [WALL, MUD, WALL, MUD, WALL, PATH, PATH, PATH, WALL, PATH, WALL, WATER, WATER, WATER, WALL, PATH, PATH, MUD, MUD, MUD, WALL],
    [WALL, MUD, WALL, WALL, WALL, PATH, WALL, PATH, WALL, PATH, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, PATH, WALL, WALL, WALL, MUD, WALL],
    [WALL, MUD, WALL, MUD, MUD, MUD, WALL, PATH, WALL, PATH, WALL, WATER, WATER, WATER, WALL, PATH, WALL, PATH, PATH, PATH, WALL],
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, PATH, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, PATH, WALL],
    [WALL, MUD, MUD, MUD, MUD, MUD, MUD, MUD, MUD, MUD, WALL, MUD, MUD, PATH, PATH, PATH, WALL, PATH, PATH, PATH, WALL],
    [WALL, WALL, WALL, WALL, WALL, MUD, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, PATH, WALL, PATH, WALL, PATH, WALL],
    [WALL, MUD, MUD, MUD, MUD, MUD, MUD, MUD, WALL, MUD, MUD, MUD, PATH, PATH, PATH, PATH, PATH, PATH, WALL, PATH, WALL],
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL]
]

maze_layout3 = [
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL],
    [WALL, BRIDGE, WALL, WATER, WATER, WATER, WATER, WATER, WALL, WATER, WALL, WATER, WATER, WATER, WALL, WATER, WATER, WATER, WALL, WATER, WALL],
    [WALL, BRIDGE, WALL, WALL, WALL, WALL, WALL, WATER, WALL, WATER, WALL, WALL, WALL, WATER, WALL, WALL, WALL, WATER, WALL, WATER, WALL],
    [WALL, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, WALL, WATER, WALL],
    [WALL, BRIDGE, WALL, WALL, WALL, BRIDGE, WALL, WALL, WALL, WATER, WALL, WALL, WALL, WALL, WALL, WATER, WALL, BRIDGE, WALL, WATER, WALL],
    [WALL, BRIDGE, WATER, WATER, WATER, BRIDGE, WALL, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WALL, WATER, WATER, BRIDGE, WATER, WATER, WALL],
    [WALL, BRIDGE, WALL, WALL, WALL, BRIDGE, WALL, WALL, WALL, WATER, WALL, WALL, WALL, WATER, WALL, WALL, WALL, BRIDGE, WALL, WALL, WALL],
    [WALL, BRIDGE, WALL, WATER, WALL, BRIDGE, WALL, WATER, WATER, WATER, WALL, WATER, WATER, WATER, WALL, WATER, WATER, BRIDGE, WATER, WATER, WALL],
    [WALL, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, WALL, WALL, WALL, WALL, WALL, WATER, WALL, WALL, WALL, BRIDGE, WALL, WALL, WALL],
    [WALL, WATER, WALL, WATER, WALL, BRIDGE, WALL, BRIDGE, BRIDGE, BRIDGE, BRIDGE, WATER, WATER, WATER, WATER, WATER, WATER, BRIDGE, WALL, WATER, WALL],
    [WALL, WATER, WALL, WATER, WALL, BRIDGE, WALL, WALL, WALL, WALL, BRIDGE, WATER, WALL, WALL, WALL, WATER, WALL, BRIDGE, WALL, WATER, WALL],
    [WALL, WATER, WATER, WATER, WATER, BRIDGE, WATER, WATER, WATER, WATER, BRIDGE, BRIDGE, WALL, WATER, WATER, WATER, WALL, BRIDGE, WATER, WATER, WALL],
    [WALL, WATER, WALL, WATER, WALL, BRIDGE, WALL, WATER, WALL, WATER, WALL, BRIDGE, BRIDGE, WALL, WALL, WALL, WALL, BRIDGE, WALL, WALL, WALL],
    [WALL, WATER, WALL, WATER, WALL, BRIDGE, WATER, WATER, WALL, WATER, WALL, WATER, BRIDGE, WATER, WALL, WATER, WATER, BRIDGE, WATER, WATER, WALL],
    [WALL, WATER, WALL, WALL, WALL, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, BRIDGE, WATER, WALL],
    [WALL, WATER, WALL, WATER, WATER, WATER, WALL, WATER, WALL, WATER, WALL, WATER, WATER, WATER, WALL, WATER, WALL, WATER, BRIDGE, WATER, WALL],
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, WATER, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, BRIDGE, WATER, WALL],
    [WALL, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WALL, WATER, WATER, WATER, WATER, WATER, WALL, WATER, BRIDGE, WATER, WALL],
    [WALL, WALL, WALL, WALL, WALL, WATER, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WATER, WALL, WATER, BRIDGE, BRIDGE, WALL],
    [WALL, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WALL, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WATER, WALL, BRIDGE, WALL],
    [WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL, WALL]
]


maze1 = [
    [MazeNode(x, y, traversable=(maze_layout1[y][x] != WALL), cost=maze_layout1[y][x]) for x in range(len(maze_layout1[0]))]
    for y in range(len(maze_layout1))
]

maze2 = [
    [MazeNode(x, y, traversable=(maze_layout2[y][x] != WALL), cost=maze_layout2[y][x]) for x in range(len(maze_layout2[0]))]
    for y in range(len(maze_layout2))
]

maze3 = [
    [MazeNode(x, y, traversable=(maze_layout3[y][x] != WALL), cost=maze_layout3[y][x]) for x in range(len(maze_layout3[0]))]
    for y in range(len(maze_layout3))
]

for row in maze1:
    for node in row:
        node.calculate_heuristic(GOAL_X, GOAL_Y)

for row in maze2:
    for node in row:
        node.calculate_heuristic(GOAL_X, GOAL_Y)

for row in maze3:
    for node in row:
        node.calculate_heuristic(GOAL_X, GOAL_Y)
